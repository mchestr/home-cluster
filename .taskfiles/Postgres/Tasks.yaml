---
version: "3"

vars:
  # all_apps: default:deployment/authelia:2:authelia default:deployment/autobrr:1:autobrr default:deployment/displex:1:displex default:deployment/home-assistant:1:home-assistant default:deployment/immich:1:immich default:deployment/lldap:2:lldap default:deployment/paperless:1:paperless default:deployment/prowlarr:1:prowlarr default:deployment/radarr:1:radarr_log,radarr_main default:deployment/sonarr:1:sonarr_log,sonarr_main monitoring:deployment/gatus:1:gatus
  all_apps: default:deployment/authelia:2:authelia default:deployment/lldap:2:lldap default:deployment/paperless:1:paperless
  cron_jobs: displex-requests-upgrade displex-token-maintenance displex-user-refresh postgres-backups
  TIMESTAMP: '{{now | date "150405"}}'
  backupJobTemplate: "{{.ROOT_DIR}}/.taskfiles/Postgres/BackupJob.tmpl.yaml"
  restoreJobTemplate: "{{.ROOT_DIR}}/.taskfiles/Postgres/RestoreJob.tmpl.yaml"
  createdbJobTemplate: "{{.ROOT_DIR}}/.taskfiles/Postgres/CreateDatabaseJob.tmpl.yaml"
  FROM_HOST: postgres-rw.default.svc.cluster.local
  FROM_VERSION: 15
  TO_HOST: postgres16-rw.default.svc.cluster.local
  TO_VERSION: 16

output: prefixed

tasks:
  migrate:
    desc: Migrate to new PG version
    cmds:
      - task: scale-down:all
      # - sleep 30
      # - task: backup:all
      - task: restore:all
      - task: scale-up:all

  backup:all:
    desc: Backup all DBs
    cmds:
      - for:
          var: all_apps
        task: backup:app
        vars:
          NAMESPACE:
            sh: IFS=':' read -r var1 var2 var3 var4 <<< '{{ .ITEM }}' && echo $var1
          RESOURCE:
            sh: IFS=':' read -r var1 var2 var3 var4 <<< '{{ .ITEM }}' && echo $var2
          REPLICAS:
            sh: IFS=':' read -r var1 var2 var3 var4 <<< '{{ .ITEM }}' && echo $var3
          DATABASES:
            sh: IFS=':' read -r var1 var2 var3 var4 <<< '{{ .ITEM }}' && echo $var4
          HOST: "{{ .FROM_HOST }}"
          VERSION: "{{ .FROM_VERSION }}"

  backup:app:
    desc: Backup an apps databases
    cmds:
      - for:
          var: DATABASES
          split: ","
        task: backup
        vars:
          HOST: "{{ .HOST }}"
          VERSION: "{{ .VERSION }}"
          DATABASE: "{{ .ITEM }}"
    vars:
      HOST: "{{ .HOST }}"
      VERSION: "{{ .VERSION }}"
      DATABASES: "{{ .DATABASES }}"

  backup:
    desc: Take a backup
    env:
      HOST: "{{ .HOST }}"
      VERSION: "{{ .VERSION }}"
      DATABASE: "{{ .DATABASE }}"
      TIMESTAMP: "{{ .TIMESTAMP }}"
      DB_ESCAPED:
        sh: echo "{{ .DATABASE }}" | tr _ -
    cmds:
      - echo "Backing up {{ .DATABASE }}"
      - envsubst < <(cat {{.backupJobTemplate}}) | kubectl apply -f -
      - kubectl wait --for=condition=complete job/postgres-backup-${DB_ESCAPED}-${TIMESTAMP}

  restore:all:
    desc: Restore all DBs
    cmds:
      - for:
          var: all_apps
        vars:
          NAMESPACE:
            sh: IFS=':' read -r var1 var2 var3 var4 <<< '{{ .ITEM }}' && echo $var1
          RESOURCE:
            sh: IFS=':' read -r var1 var2 var3 var4 <<< '{{ .ITEM }}' && echo $var2
          REPLICAS:
            sh: IFS=':' read -r var1 var2 var3 var4 <<< '{{ .ITEM }}' && echo $var3
          DATABASES:
            sh: IFS=':' read -r var1 var2 var3 var4 <<< '{{ .ITEM }}' && echo $var4
          APP:
            sh: IFS=':' read -r var1 var2 var3 var4 <<< '{{ .ITEM }}' && echo $var2 | awk -F '[/:]' '{print $2}'
          HOST: "{{ .TO_HOST }}"
          VERSION: "{{ .TO_VERSION }}"
        task: restore:app

  restore:app:
    desc: Restore an apps databases
    cmds:
      - echo "Restoring app {{ .APP }}"
      - task: restore
        for:
          var: DATABASES
          split: ","
        vars:
          HOST: "{{ .HOST }}"
          VERSION: "{{ .VERSION }}"
          DATABASE: "{{ .ITEM }}"
          APP: "{{ .APP }}"
    vars:
      HOST: "{{ .HOST }}"
      VERSION: "{{ .VERSION }}"
      DATABASES: "{{ .DATABASES }}"
      APP: "{{ .APP }}"

  restore:
    desc: Restore a backup
    env:
      HOST: "{{ .HOST }}"
      VERSION: "{{ .VERSION }}"
      DATABASE: "{{ .DATABASE }}"
      TIMESTAMP: "{{ .TIMESTAMP }}"
      APP: "{{ .APP }}"
      DB_ESCAPED:
        sh: echo "{{ .DATABASE }}" | tr _ -
    cmds:
      - echo "Restoring {{ .APP }} -> {{ .DATABASE }}..."
      - envsubst < <(cat {{.createdbJobTemplate}}) | kubectl apply -f -
      - kubectl wait --for=condition=complete job/postgres-createdb-${DB_ESCAPED}-${TIMESTAMP}
      - envsubst < <(cat {{.restoreJobTemplate}}) | kubectl apply -f -
      - kubectl wait --for=condition=complete job/postgres-restore-${DB_ESCAPED}-${TIMESTAMP}

  scale-down:all:
    desc: Scale down all apps using postgres
    cmds:
      - task: scale
        for:
          var: all_apps
        vars:
          NAMESPACE:
            sh: IFS=':' read -r var1 var2 var3 var4 <<< '{{ .ITEM }}' && echo $var1
          RESOURCE:
            sh: IFS=':' read -r var1 var2 var3 var4 <<< '{{ .ITEM }}' && echo $var2
          REPLICAS: 0
      - for:
          var: cron_jobs
        cmd: 'kubectl patch cronjobs {{ .ITEM }} -p "{\"spec\" : {\"suspend\" : true }}"'

  scale-up:all:
    desc: Scale up all apps using postgres
    cmds:
      - task: scale
        for:
          var: all_apps
        vars:
          NAMESPACE:
            sh: "IFS=: read -r var1 var2 var3 var4 <<<  '{{ .ITEM }}' && echo $var1"
          RESOURCE:
            sh: "IFS=: read -r var1 var2 var3 var4 <<<  '{{ .ITEM }}' && echo $var2"
          REPLICAS:
            sh: "IFS=: read -r var1 var2 var3 var4 <<<  '{{ .ITEM }}' && echo $var3"
      - for:
          var: cron_jobs
        cmd: 'kubectl patch cronjobs {{ .ITEM }} -p "{\"spec\" : {\"suspend\" : false }}"'

  scale:
    internal: true
    desc: Scale an app
    requires:
      vars:
        - NAMESPACE
        - RESOURCE
        - REPLICAS
    cmds:
      - kubectl -n {{ .NAMESPACE }} scale {{ .RESOURCE }} --replicas {{ .REPLICAS }}
