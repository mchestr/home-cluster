---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 5m
  install:
    remediation:
      retries: 3
  upgrade:
    remediation:
      retries: 3
  chart:
    spec:
      # renovate: registryUrl=https://prometheus-community.github.io/helm-charts
      chart: kube-prometheus-stack
      version: 41.5.1
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
      interval: 5m
  valuesFrom:
    - kind: Secret
      name: prometheus-secrets
  values:
    fullnameOverride: prometheus
    alertmanager:
      enabled: true
      config:
        global:
          resolve_timeout: 5m
        receivers:
          - name: "null"
          - name: discord
            slack_configs:
              - channel: "#prometheus"
                icon_url: https://avatars3.githubusercontent.com/u/3380462
                username: Prometheus
                send_resolved: true
                title: |-
                  [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }}{{ else }}{{ .CommonLabels.alertname }}{{ end }}
                text: >-
                  {{ range .Alerts -}}
                    **Alert:** {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}
                  **Description:** {{ if ne .Annotations.description ""}}{{ .Annotations.description }}{{else}}N/A{{ end }}
                  **Details:**
                    {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
                    {{ end }}
                  {{ end }}
        route:
          group_by:
            - alertname
            - job
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 6h
          receiver: discord
          routes:
            - receiver: "null"
              matchers:
                - alertname=~"Watchdog|InfoInhibitor"
            - receiver: discord
              matchers:
                - severity=~"warning|critical"
              continue: true
        inhibit_rules:
          - source_matchers:
              - severity=critical
            target_matchers:
              - severity=warning
            equal:
              - alertname
              - namespace
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: traefik
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-production
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
          traefik.ingress.kubernetes.io/router.middlewares: networking-internal-auth@kubernetescrd
          hajimari.io/enable: "true"
          hajimari.io/icon: akar-icons:circle-alert
          hajimari.io/group: System Management
          hajimari.io/appName: alertmanager
        hosts:
          - &am-host alert-manager.${CLUSTER_DOMAIN}
        tls:
          - hosts:
              - *am-host
            secretName: alert-manager-tls
      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: longhorn
              resources:
                requests:
                  storage: 1Gi
    grafana:
      enabled: false
    prometheus-node-exporter:
      fullnameOverride: node-exporter
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: kubernetes_node
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance
    kubeScheduler:
      enabled: false
    kubeProxy:
      enabled: false
    kubeControllerManager:
      enabled: false
    kubeApiServer:
      enabled: true
    kubeStateMetrics:
      enabled: true
    coreDns:
      enabled: true
    nodeExporter:
      enabled: true
      serviceMonitor:
        relabelings:
          - action: replace
            sourceLabels:
              - __meta_kubernetes_pod_node_name
            targetLabel: kubernetes_node
    kube-state-metrics:
      fullnameOverride: kube-state-metrics
    # Setting this option to 0 disabled CPU limits
    prometheusOperator:
      configReloaderCpu: 0
    prometheus:
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: traefik
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-production
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
          traefik.ingress.kubernetes.io/router.middlewares: networking-internal-auth@kubernetescrd
          hajimari.io/enable: "true"
          hajimari.io/icon: simple-icons:prometheus
          hajimari.io/group: storage, database, and messaging
          hajimari.io/appName: prometheus
        hosts:
          - &host prometheus.${CLUSTER_DOMAIN}
        tls:
          - hosts:
              - *host
            secretName: prometheus-tls
      thanosService:
        enabled: true
      thanosServiceMonitor:
        enabled: true
      prometheusSpec:
        replicas: 1
        replicaExternalLabelName: "replica"
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        retention: 6h
        retentionSize: 6GB
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: longhorn
              resources:
                requests:
                  storage: 80Gi
        thanos:
          image: quay.io/thanos/thanos:v0.28.1
          # renovate: datasource=docker depName=quay.io/thanos/thanos
          version: "v0.28.1"
          objectStorageConfig:
            name: thanos-objstore-secret
            key: objstore.yml
