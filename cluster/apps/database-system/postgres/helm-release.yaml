---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: postgres
  namespace: database-system
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://charts.bitnami.com/bitnami
      chart: postgresql
      version: 12.1.2
      sourceRef:
        kind: HelmRepository
        name: bitnami-charts
        namespace: flux-system
      interval: 15m
  valuesFrom:
    - kind: Secret
      name: postgres-secrets
      targetPath: global.postgresql.auth.password
      valuesKey: password
    - kind: Secret
      name: postgres-secrets
      targetPath: global.postgresql.auth.postgresPassword
      valuesKey: postgres-password
  values:
    fullnameOverride: postgres
    image:
      registry: public.ecr.aws
      repository: bitnami/postgresql
      tag: 15-debian-11
    architecture: standalone
    global:
      auth:
        username: root
        database: root
        existingSecret: postgres-secrets
        secretKeys:
          adminPasswordKey: postgres-password
          userPasswordKey: password
          replicationPasswordKey: replication-password
    auth:
      username: root
      database: root
      existingSecret: postgres-secrets
    primary:
      service:
        type: LoadBalancer
        loadBalancerIP: ${METALLB_POSTGRES_ADDR}
      persistence:
        existingClaim: postgres-data-v1
      initdb:
        scripts:
          create-paperless-db.sql: |
            CREATE DATABASE ${PAPERLESS_DATABASE_NAME};
            CREATE USER ${PAPERLESS_DATABASE_USER} WITH PASSWORD '${PAPERLESS_DATABASE_PASSWORD}';
            GRANT ALL PRIVILEGES ON DATABASE "${PAPERLESS_DATABASE_NAME}" to ${PAPERLESS_DATABASE_USER};
          create-authentik-db.sql: |
            CREATE DATABASE ${AUTHENTIK_DATABASE_NAME};
            CREATE USER ${AUTHENTIK_DATABASE_USER} WITH PASSWORD '${AUTHENTIK_DATABASE_PASSWORD}';
            GRANT ALL PRIVILEGES ON DATABASE "${AUTHENTIK_DATABASE_NAME}" to ${AUTHENTIK_DATABASE_USER};
          create-immich-db.sql: |
            CREATE DATABASE ${IMMICH_DATABASE_NAME};
            CREATE USER ${IMMICH_DATABASE_USER} WITH PASSWORD '${IMMICH_DATABASE_PASSWORD}';
            GRANT ALL PRIVILEGES ON DATABASE "${IMMICH_DATABASE_NAME}" to ${IMMICH_DATABASE_USER};
    metrics:
      enabled: true
      image:
        registry: public.ecr.aws
        repository: bitnami/postgres-exporter
      serviceMonitor:
        enabled: true
    commonAnnotations:
      prometheus.io/probe: "true"
      prometheus.io/protocol: tcp
