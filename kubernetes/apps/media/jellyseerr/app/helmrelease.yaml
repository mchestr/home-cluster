---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app jellyseerr
spec:
  interval: 30m
  chartRef:
    kind: OCIRepository
    name: app-template
  install:
    remediation:
      retries: -1
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    controllers:
      jellyseerr:
        annotations:
          reloader.stakater.com/auto: "true"

        initContainers:
          01-init-db:
            image:
              repository: ghcr.io/home-operations/postgres-init
              tag: "17"
            envFrom:
              - secretRef:
                  name: jellyseerr-initdb-secret

        containers:
          app:
            image:
              repository: ghcr.io/fallenbagel/jellyseerr
              tag: 2.5.2@sha256:2a611369ad1d0d501c2d051fc89b6246ff081fb4a30879fdc75642cf6a37b1a6
            env:
              TZ: America/Vancouver
              LOG_LEVEL: "info"
              PORT: &port 5055
              # Enable Postgres
              DB_TYPE: postgres
              DB_HOST:
                valueFrom:
                  secretKeyRef:
                    name: &pguser jellyseerr-pguser-secret
                    key: host
              DB_USER:
                valueFrom:
                  secretKeyRef:
                    name: *pguser
                    key: user
              DB_PASS:
                valueFrom:
                  secretKeyRef:
                    name: *pguser
                    key: password
              DB_NAME:
                valueFrom:
                  secretKeyRef:
                    name: *pguser
                    key: db
            envFrom:
              - secretRef:
                  name: jellyseerr-secret
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /api/v1/status
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 10m
              limits:
                memory: 2Gi
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch
        seccompProfile: { type: RuntimeDefault }
    service:
      app:
        controller: *app
        ports:
          http:
            port: *port

    route:
      app:
        hostnames: ["requests.chestr.dev"]
        annotations:
          gethomepage.dev/enabled: "true"
          gethomepage.dev/icon: overseerr.png
          gethomepage.dev/name: Requests
          gethomepage.dev/group: Media
          gethomepage.dev/widget.type: overseerr
          gethomepage.dev/widget.url: http://jellyseerr.media.svc.cluster.local:5055
          gethomepage.dev/widget.key: '{{ "{{HOMEPAGE_VAR_JELLYSEERR_API_KEY}}" }}'
        parentRefs:
          - name: external
            namespace: networking
            sectionName: https
        rules:
          - backendRefs:
              - name: *app
                port: *port

    persistence:
      config:
        existingClaim: *app
        globalMounts:
          - path: /app/config
      config-cache:
        existingClaim: jellyseerr-cache
        globalMounts:
          - path: /app/config/cache
      config-logs:
        type: emptyDir
        globalMounts:
          - path: /app/config/logs
      tmp:
        type: emptyDir
